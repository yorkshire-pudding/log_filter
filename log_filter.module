<?php
/**
 * @file
 *  Drupal Log Filter module
 */

/**
 * Implements hook_permission().
 *
 * Define permission types (Drupal API function).
 *
 * @return array
 */
function log_filter_permission() {
  return array(
    'log_filter administer' => array(
      'title' => t('Administer log filtering'),
      'restrict access' => TRUE,
    ),
    'log_filter edit filters' => array(
      'title' => t('Create/edit/delete saveable log filters'),
      'restrict access' => TRUE,
    ),
    'log_filter remove logs' => array(
      'title' => t('Remove logs'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_menu().
 *
 * Declares configuration page.
 *
 * @return void
 */
function log_filter_menu() {
  $items = array(
    //  Settings page.
    'admin/config/system/log_filter' => array(
      'title' => 'Log Filter',
      'description' => 'Configure Log Filtering',
      'page callback' => 'drupal_get_form', // hook to implement
      'page arguments' => array('_log_filter_admin_form'), // name of implementing function
      'access arguments' => array('log_filter administer'), // permission required
      'file' => 'admin/log_filter.admin.inc',
      'type' => MENU_NORMAL_ITEM,
    ),
    //  AJAX callback.
    'log_filter/ajax/%' => array( // % ~ ?
      'page callback' => 'log_filter_ajax_callback',
      'page arguments' => array(2), // start at that bucket index
      'access callback' => TRUE,
      'access arguments' => array('access site reports'), // Permission required.
      'type' => MENU_CALLBACK,
    ),
  );

  $i = 0;
  //  Add two tabs to dblog's default viewer.
  if (!variable_get('log_filter_hidedblog', FALSE)) {
    $items['admin/reports/dblog/dblog'] = array(
			'type' => MENU_DEFAULT_LOCAL_TASK,
      'title' => t('Recent log messages'),
      'weight' => ++$i,
		);
    $items['admin/reports/dblog/log_filter'] = array(
			'title' => t('Filtered log messages'),
			'description' => t('View logged events using filters'),
			'page callback' => 'drupal_get_form', // Hook to implement.
			'page arguments' => array('log_filter_form'), // Name of implementing function.
			'access arguments' => array('access site reports'), // Permission required.
			'file' => 'LogFilter.inc',
			'type' => MENU_LOCAL_TASK,
      'weight' => ++$i,
		);
  }
  //  ... or take over url of dblog's default viewer.
  else {
    $items['admin/reports/dblog'] = array(
      'title' => 'Recent log messages',
			'description' => t('View logged events using filters'),
			'page callback' => 'drupal_get_form', // Hook to implement.
			'page arguments' => array('log_filter_form'), // Name of implementing function.
			'access arguments' => array('access site reports'), // Permission required.
			'file' => 'LogFilter.inc',
			'type' => MENU_NORMAL_ITEM,
      'weight' => -1,
    );
    $items['admin/reports/dblog/log_filter'] = array(
			'type' => MENU_DEFAULT_LOCAL_TASK,
      'title' => t('Recent log messages'),
      'weight' => ++$i,
		);
  }

  $items['admin/reports/dblog/log_filter_remove_logs'] = array(
    'title' => t('Remove log messages'),
    'description' => t('Remove logged events using filters'),
    'page callback' => 'drupal_get_form', // Hook to implement.
    'page arguments' => array('log_filter_remove_form'), // Name of implementing function.
    'access arguments' => array('log_filter remove logs'), // Permission required.
    'file' => 'LogFilter.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => ++$i,
  );
  return $items;
}

/**
 * @param array $form
 * @param array &$form_state
 * @return void
 */
function log_filter_admin_form_submit($form, &$form_state) {
  module_load_include('inc', 'log_filter', 'log_filter.admin');
  _log_filter_admin_form_submit($form, $form_state);
}

/**
 * Expects (requires) POST vars: action, arg.
 *
 * @param mixed $whatever
 *  - x
 * @return void
 *  - sends 403 header if the expected POST vars arent set or their sanitized values evaluates to empty
 */
function log_filter_ajax_callback($whatever) {
  if (TRUE === FALSE
  ) {
    header('HTTP/1.1 403 Forbidden');
    exit;
  }
  $response = new stdClass();
  $response->action = $action;
  $response->success = TRUE;
  $response->error = '';


  header('Content-Type: application/json; charset=utf-8');
  header('Cache-Control: private, no-store, no-cache, must-revalidate');
  header('Expires: Thu, 01 Jan 1970 00:00:01 GMT');
  //  No reason to use drupal_json_encode(), because we dont send html strings.
  echo json_encode($response);
  flush();
  exit;
}