<?php
/**
 * @file
 *  Drupal Log Filter module
 */

/**
 * Implements hook_permission().
 *
 * Define permission types (Drupal API function).
 *
 * @return array
 */
function log_filter_permission() {
  return array(
    'log_filter administer' => array(
      'title' => t('Administer log filtering'),
      'restrict access' => TRUE,
    ),
    'log_filter edit filters' => array(
      'title' => t('Create/edit/delete saveable log filters'),
      'restrict access' => TRUE,
    ),
    'log_filter remove logs' => array(
      'title' => t('Remove logs'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_menu().
 *
 * Declares configuration page.
 *
 * @return void
 */
function log_filter_menu() {
  $items = array(
    //  Settings page.
    'admin/config/system/log_filter' => array(
      'title' => 'Log Filter',
      'description' => 'Configure Log Filtering',
      'page callback' => 'drupal_get_form', // hook to implement
      'page arguments' => array('_log_filter_admin_form'), // name of implementing function
      'access arguments' => array('log_filter administer'), // permission required
      'file' => 'admin/log_filter.admin.inc',
      'type' => MENU_NORMAL_ITEM,
    ),
    //  AJAX callback.
    'log_filter/ajax/%' => array( // % ~ action
      'page callback' => 'log_filter_ajax_callback',
      'page arguments' => array(2), // start at that bucket index
      'access callback' => TRUE,
      'access arguments' => array('access site reports'), // Permission required.
      'type' => MENU_CALLBACK,
    ),
  );

  $i = 0;
  //  Add two tabs to dblog's default viewer.
  if (!variable_get('log_filter_hidedblog', FALSE)) {
    $items['admin/reports/dblog/dblog'] = array(
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'title' => 'Recent log messages',
      'weight' => ++$i,
    );
    $items['admin/reports/dblog/log_filter'] = array(
      'title' => 'Filtered log messages',
      'description' => 'View logged events using filters',
      'page callback' => 'drupal_get_form', // Hook to implement.
      'page arguments' => array('log_filter_form'), // Name of implementing function.
      'access arguments' => array('access site reports'), // Permission required.
      'file' => 'LogFilter.inc',
      'type' => MENU_LOCAL_TASK,
      'weight' => ++$i,
    );
  }
  //  ... or take over url of dblog's default viewer.
  else {
    $items['admin/reports/dblog'] = array(
      'title' => 'Recent log messages',
      'description' => 'View logged events using filters',
      'page callback' => 'drupal_get_form', // Hook to implement.
      'page arguments' => array('log_filter_form'), // Name of implementing function.
      'access arguments' => array('access site reports'), // Permission required.
      'file' => 'LogFilter.inc',
      'type' => MENU_NORMAL_ITEM,
      'weight' => -1,
    );
    $items['admin/reports/dblog/log_filter'] = array(
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'title' => 'Recent log messages',
      'weight' => ++$i,
    );
  }
  $items['admin/reports/dblog/log_filter_settings'] = array(
    'title' => 'Log filter settings',
    'description' => 'Configure Log Filtering',
    'page callback' => 'drupal_get_form', // hook to implement
    'page arguments' => array('_log_filter_admin_form'), // name of implementing function
    'access arguments' => array('log_filter administer'), // permission required
    'file' => 'admin/log_filter.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => ++$i,
  );
  return $items;
}

/**
 * @param array $form
 * @param array &$form_state
 * @return void
 */
function log_filter_admin_form_submit($form, &$form_state) {
  module_load_include('inc', 'log_filter', 'log_filter.admin');
  _log_filter_admin_form_submit($form, $form_state);
}

function log_filter_form_field_after_build($element) {
  if (!empty($element['#type']) && $element['#type'] == 'textarea'
      && isset($element['#resizable']) && !$element['#resizable'] // Do NOT wrap textarea if it isnt resizable (too annoying when finding in frontend).
  ) {
    unset($element['#theme_wrappers']);
  }
  return $element;
}

/**
 * Access permission: 'access site reports'.
 *
 *  Expects (requires) POST vars on actions:
 *  - create: name, require_admin
 *
 * @param string $action
 * @return void
 *  - sends 403 header if the expected POST vars arent set or their sanitized values evaluates to empty
 */
function log_filter_ajax_callback($action) {
  if (!user_access('access site reports')
      || !$action || !($le = strlen($action)) || $le > 32
  ) {
    header('HTTP/1.1 403 Forbidden');
    exit;
  }
  $oResp = new stdClass();
  $oResp->action = $action;
  $oResp->success = TRUE;
  $oResp->error_code = 0;
  $oResp->error = '';

  try {
    $uid = $GLOBALS['user']->uid;
    switch ($action) {
      case 'create':
        if (
            !array_key_exists('name', $_POST) || !($le = strlen($name = $_POST['name'])) || $le > 32
            || !array_key_exists('require_admin', $_POST) || !(($require_admin = (int)$_POST['require_admin']) == 0 || $require_admin == 1)
        ) {
          header('HTTP/1.1 403 Forbidden');
          exit;
        }
        if (!user_access('log_filter edit filters')) {
          $oResp->success = FALSE;
          $oResp->error_code = 10;
          $oResp->error = 'Missing permission.';
          throw new Exception(
              'Logical error: missing permission \'log_filter edit filters\' for user (' . $uid . ') ' . $GLOBALS['user']->name
                  . ', thus the user should not be presented with the option of saving a filter.'
          );
        }
        elseif (!preg_match('/^[a-z_][a-z\d_]+$/', $name) || $name == 'default' || $name == 'adhoc') { // @IDE: var $name is declared.
          $oResp->success = FALSE;
          $oResp->error_code = 20;
          $oResp->error = 'Invalid machine name[' . $name . '].';
          $oResp->name = $name;
        }
        else {
          $oResp->name = $name = strtolower($name);
          try {
            db_insert('log_filter')->fields(array(
              'name' => $name,
              'creator' => $uid,
              'require_admin' => $require_admin,
              'type' => '', // No default because text field.
              'editor' => $uid,
              'created' => REQUEST_TIME,
            ))
            ->execute();
          }
          catch (PDOException $xc) {
            if ((int)$xc->getCode() == 23000) { // Fair chance that it's a duplicate key error, though 23000 may also (MySQL) mean null error.
              $oResp->success = FALSE;
              $oResp->error_code = 30;
              $oResp->error = 'Filter name[' . $name . '] already exists.';
              LogFilter::errorHandler($xc);
            }
            else {
              throw $xc;
            }
          }
        }
        break;
      default:
        $oResp->success = FALSE;
        $oResp->error_code = 1;
        $oResp->error = 'Unsupported action[' . $action . '].';
    }
  }
  catch (PDOException $xc) {
    LogFilter::errorHandler($xc);
    $oResp->success = FALSE;
    $oResp->error_code = 90;
  }
  catch (Exception $xc) {
    LogFilter::errorHandler($xc);
    $oResp->success = FALSE;
  }

  header('Content-Type: application/json; charset=utf-8');
  header('Cache-Control: private, no-store, no-cache, must-revalidate');
  header('Expires: Thu, 01 Jan 1970 00:00:01 GMT');
  //  No reason to use drupal_json_encode(), because we dont send html strings.
  echo json_encode($oResp);
  flush();
  exit;
}