<?php
/**
 * @file
 *  Drupal Log Filter module
 */

/**
 * Implements hook_permission().
 *
 * Define permission types (Drupal API function).
 *
 * @return array
 */
function log_filter_permission() {
  return array(
    'log_filter administer' => array(
      'title' => t('Administer log filtering'),
      'restrict access' => TRUE,
    ),
    'log_filter edit filters' => array(
      'title' => t('Create/edit/delete saveable log filters'),
    ),
    'log_filter remove logs' => array(
      'title' => t('Remove logs'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_menu().
 *
 * Declares configuration page.
 *
 * @return void
 */
function log_filter_menu() {
  $items = array(
    //  Settings page.
    'admin/config/system/log_filter' => array(
      'title' => 'Log Filter',
      'description' => 'Configure Log Filtering',
      'page callback' => 'drupal_get_form', // hook to implement
      'page arguments' => array('_log_filter_admin_form'), // name of implementing function
      'access arguments' => array('log_filter administer'), // permission required
      'file' => 'admin/log_filter.admin.inc',
      'type' => MENU_NORMAL_ITEM,
    ),
    //  AJAX callback.
    'log_filter/ajax/%' => array( // % ~ action
      'page callback' => 'log_filter_ajax_callback',
      'page arguments' => array(2), // start at that bucket index
      'access callback' => TRUE,
      'access arguments' => array('access site reports'), // Permission required.
      'type' => MENU_CALLBACK,
    ),
  );

  //  NB: Accessing a saved filter is done via an extra url argument after admin/reports/dblog/log_filter; see LogFilter::FILTER_NAME_ARG.

  $i = 0;
  //  Add two tabs to dblog's default viewer.
  if (!variable_get('log_filter_hidedblog', FALSE)) {
    $items['admin/reports/dblog/dblog'] = array(
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'title' => 'Recent log messages',
      'weight' => ++$i,
    );
    $items['admin/reports/dblog/log_filter'] = array(
      'title' => 'Filtered log messages',
      'description' => 'View logged events using filters',
      'page callback' => 'drupal_get_form', // Hook to implement.
      'page arguments' => array('log_filter_form'), // Name of implementing function.
      'access arguments' => array('access site reports'), // Permission required.
      'type' => MENU_LOCAL_TASK,
      'weight' => ++$i,
    );
  }
  //  ... or take over url of dblog's default viewer.
  else {
    $items['admin/reports/dblog'] = array(
      'title' => 'Recent log messages',
      'description' => 'View logged events using filters',
      'page callback' => 'drupal_get_form', // Hook to implement.
      'page arguments' => array('log_filter_form'), // Name of implementing function.
      'access arguments' => array('access site reports'), // Permission required.
      'type' => MENU_NORMAL_ITEM,
      'weight' => -1,
    );
    $items['admin/reports/dblog/log_filter'] = array(
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'title' => 'Recent log messages',
      'weight' => ++$i,
    );
  }
  $items['admin/reports/dblog/log_filter_settings'] = array(
    'title' => 'Log filter settings',
    'description' => 'Configure Log Filtering',
    'page callback' => 'drupal_get_form', // hook to implement
    'page arguments' => array('_log_filter_admin_form'), // name of implementing function
    'access arguments' => array('log_filter administer'), // permission required
    'file' => 'admin/log_filter.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => ++$i,
  );
  return $items;
}

/**
 * Defines log viewer form and GUI.
 *
 * Function name not underscore prefixed to prevent html form id starting with hyphen (unhealthy naming).
 *
 * @param array $form
 * @param array &$form_state
 * @return array
 */
function log_filter_form($form, &$form_state) {
  module_load_include('inc', 'log_filter', 'LogFilter');
  return LogFilter::viewerForm($form, $form_state);
}

/**
 * Called when log viewer form submits.
 *
 * @param array $form
 * @param array &$form_state
 * @return void
 */
function _log_filter_form_submit($form, &$form_state) {
  module_load_include('inc', 'log_filter', 'LogFilter');
  LogFilter::viewerFormSubmit($form, $form_state);
}

/**
 * @param array $form
 * @param array &$form_state
 * @return void
 */
function log_filter_admin_form_submit($form, &$form_state) {
  module_load_include('inc', 'log_filter', 'log_filter.admin');
  _log_filter_admin_form_submit($form, $form_state);
}

function log_filter_form_field_after_build($element) {
  if (!empty($element['#type']) && $element['#type'] == 'textarea'
      && isset($element['#resizable']) && !$element['#resizable'] // Do NOT wrap textarea if it isnt resizable (too annoying when finding in frontend).
  ) {
    unset($element['#theme_wrappers']);
  }
  return $element;
}

/**
 * Access permission: 'access site reports'.
 *
 *  Expects (requires) POST vars on actions:
 *  - create: form_token, name, require_admin
 *
 * @see LogFilter::ajaxCallback
 * @param string $action
 * @return void
 *  - sends 403 header if the expected POST vars arent set or their sanitized values evaluates to empty
 */
function log_filter_ajax_callback($action) {
  module_load_include('inc', 'log_filter', 'LogFilter');
  LogFilter::ajaxCallback($action);
}